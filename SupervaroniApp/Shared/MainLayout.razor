@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@using MudBlazor
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
<PageTitle>Supervaroni</PageTitle>

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" />
                <a href="Identity/Account/Manage">Sveiks, @context.User.Identity?.Name!</a>
                <form method="post" action="Identity/Account/LogOut">
                    <button type="submit" class="nav-link btn btn-link">Iziet</button>
                </form>
            </Authorized>
            <NotAuthorized>
                <a href="Identity/Account/Register">Reģistrēties</a>
                <a href="Identity/Account/Login">Ienākt</a>
            </NotAuthorized>
        </AuthorizeView>

        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <div class="drawer-container">
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenuNew/>
    </MudDrawer>
    </div>
    <MudMainContent Style="padding: 10vh 5vh 10vh 5vh">
        @Body
    </MudMainContent>
</MudLayout>






@code{

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if(!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/Identity/Account/Login?"); //returnUrl={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}
        }
    }
    private MudTheme _theme = new (); 
    
          
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

}