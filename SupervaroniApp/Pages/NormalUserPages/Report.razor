@page "/atskaite"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using System.ComponentModel.DataAnnotations
@using DataAccessLibrary
@using DataAccessLibrary.Data
@using DataAccessLibrary.Models
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SupervaroniApp.Components
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IRunnerData runnerData
@inject IReportData reportData
@inject IDialogService DialogService
@inject ISnackbar SnackbarService

<MudCard Class="my-6 py-2 py-4" Elevation="2" > @*Style="@($"background:{Colors.Grey.Lighten5}")"*@
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6" Align="Align.Center">Dienasgrāmatas datumi</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudGrid>
            <MudItem xs="6">
                <MudDatePicker Label="Sākuma datums" DateFormat="dd.MM.yyyy" @bind-Date="@DatS" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker Label="Beigu datums" DateFormat="dd.MM.yyyy" @bind-Date="@DatB" />
            </MudItem>
        </MudGrid>

    </MudCardContent>
    <MudCardActions>

        <MudButton Variant="Variant.Filled" Disabled="@_processing" Color="Color.Primary" OnClick="HandleDateFilterClick">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                @*<MudText>Izveidot Atskaiti</MudText>*@
            }
            else
            {
                <MudText>Atlasīt Datumus</MudText>
            }
        </MudButton>
    </MudCardActions>

</MudCard>


<MudTable Items="@reportList" Hover="true" CanCancelEdit="true" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => HandleRowCommit(selectedItem))" RowEditPreview="BackupItem" RowEditCommit="ItemHasBeenCommitted" @bind-SelectedItem="selectedItem" Elevation="2" Class="my-6 py-2 py-4">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Treniņu dienasgrāmata</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<RunnerReportDataModel, object>(x=>x.Dat)">Datums</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RunnerReportDataModel, object>(x=>x.Planned)">Ieplānots</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RunnerReportDataModel, object>(x=>x.Completed)">Izpildīts</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RunnerReportDataModel, object>(x=>x.Time)">Laiks</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RunnerReportDataModel, object>(x=>x.Km)">Distance (KM)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RunnerReportDataModel, object>(x=>x.Pulse)">Pulss</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RunnerReportDataModel, object>(x=>x.Notes)">Piezīmes</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate >
        <MudTd DataLabel="Datums">@context.Dat.ToShortDateString()</MudTd>
        <MudTd DataLabel="Ieplānots">@context.Planned</MudTd>
        <MudTd DataLabel="Izpildīts">@context.Completed</MudTd>
        <MudTd DataLabel="Laiks">@context.Time</MudTd>
        <MudTd DataLabel="Distance">@context.Km</MudTd>
        <MudTd DataLabel="Pulss">@context.Pulse</MudTd>
        <MudTd DataLabel="Piezīmes">@context.Notes</MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Datums">@context.Dat.ToShortDateString()</MudTd>
        <MudTd DataLabel="Ieplānots">
            <MudTextField @bind-Value="@context.Planned" />
        </MudTd>
        <MudTd DataLabel="Izpildīts">
            <MudTextField @bind-Value="@context.Completed" />
        </MudTd>
        <MudTd DataLabel="Laiks">
            <MudTextField @bind-Value="@context.Time" />
        </MudTd>
        <MudTd DataLabel="Distance">
            <MudNumericField @bind-Value="@context.Km" Format="N2" />
        </MudTd>
        <MudTd DataLabel="Pulss">
            <MudNumericField @bind-Value="@context.Pulse"/>
        </MudTd>
        <MudTd Style="overflow-wrap: break-word;" DataLabel="Peizīmes">
            <MudTextField T="string" Lines="3"  @bind-Value="@context.Notes" Adornment="Adornment.Start" />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>



    @*  <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />*@

</MudTable>
<MudText>Selected: @selectedItem?.Dat</MudText>
<MudText>Selected: @selectedItem?.Completed</MudText>
<MudText>Selected: @selectedItem?.Planned</MudText>

@code {
    private RunnerModel runner = new RunnerModel();
    DateTime? DatS = DateTime.Today.AddDays(-6);
    DateTime? DatB = DateTime.Today;
    private List<string> editEvents = new();
    private string searchString = "";
    private RunnerReportDataModel selectedItem = null;
    private RunnerReportDataModel reportBeforeEdit;
    //private HashSet<ReportDataModel> selectedItems = new HashSet<ReportDataModel>();
    List<RunnerReportDataModel> reportList = new List<RunnerReportDataModel>();

    //Ielādējot lapu ielasam datus
    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User.Identity;
        runner = runnerData.GetCurrentRunner(user.Name);
        reportList = reportData.GetRunnerReportData(runner.Id, DatS, DatB);
    }
    //Pogas ielādes animācija
    private bool _processing = false;
    async Task CreateReport()
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }

    //Tabulas funkcijas
    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object report)
    {
        reportBeforeEdit = new()
        {

        };
        //AddEditionEvent($"RowEditPreview event: made a backup of Element {((Element)element).Name}");
    }
    private void ItemHasBeenCommitted(object report)
    {
        AddEditionEvent("Izmaiņas saglabātas");
    }

    private void HandleRowCommit(RunnerReportDataModel report)
    {
        reportData.UpdateRunnerReportData(report, runner.Id);
        StateHasChanged();
    }

    private void HandleDateFilterClick()
    {
        //Lai nesaģenerētu pārāk daudz tukšus ierakstus nosaka 30 dienu intervālu datumu stratpībai.
        var CheckDat = DatB.Value.Date - DatS.Value.Date;
        var CheckDatDays = CheckDat.Days;
        if (CheckDatDays > 30)
        {
            SnackbarService.Add("Izvēlētais periods nedrīkst būt lielāks par 30 dienām", Severity.Warning, config =>
              {
                  config.Onclick = snackbar =>
                  {
                      return Task.CompletedTask;
                  };
              });
        }
        else
        {
            reportList = reportData.GetRunnerReportData(runner.Id, DatS, DatB);
            StateHasChanged();
        }

    }



}
