@page "/supervaroni"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@attribute [Authorize(Roles = "Treneris")]
@using System.ComponentModel.DataAnnotations
@using DataAccessLibrary
@using DataAccessLibrary.Data
@using DataAccessLibrary.Models
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SupervaroniApp.Components
@using SupervaroniApp.Components.Dialogs
@inject ISnackbar SnackbarService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IRunnerData runnerData
@inject IReportData reportData
@inject IDialogService DialogService
<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet" />


<MudButton Color="Color.Primary" @onclick="OpenDialog">Pievienot jaunu audzēkni</MudButton>
<MudGrid Justify="Justify.FlexStart">
    @foreach (var runner in CoachRunners)
    {

        <MudItem xs="12" sm="12" md="4" lg="4" xl="3" xxl="2" Class="d-flex flex-column mud-card">
            
                <MudBadge Dot="true" Color="color" Overlap="true" Origin="Origin.TopRight">
            
         
                <div>
                    <MudCard Class="d-flex flex-column justify-center mud-width-full pt-8 hc" Style="min-width:fit-content;" @onclick="@(() => OpenRunner(@runner.Id))">

                        <MudCardHeader Class="d-flex justify-content-center">
                            <CardHeaderAvatar>
                                <MudAvatar></MudAvatar>
                            </CardHeaderAvatar>
                        </MudCardHeader>
                        <MudDivider />
                        <MudCardContent>
                            <MudText> <b>Vārds:</b> @runner.Firstname</MudText>
                            <MudText> <b>Uzvārds:</b> @runner.Lastname</MudText>
                            <MudText> <b>Epasts:</b> @runner.Email</MudText>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-content-center">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => HandleDeleteTraineeClick(runner.Id))" />

                            <MudIconButton Icon="fa-brands fa-strava" Color="Color.Warning" Href="@runner.Strava_Link" />
                            <MudIconButton Icon="fa-solid fa-g" Color="Color.Primary" Href="@runner.Garmin_link" />
                            <MudPopover Open="@_isOpen" Fixed="true" Class="px-4 pt-4">
                                <div class="d-flex flex-column">
                                    <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                                </div>
                            </MudPopover>
                        </MudCardActions>
                    </MudCard>
                </div>
            </MudBadge>

        </MudItem>

    }

</MudGrid>


@code {

    List<RunnerModel> runners = new List<RunnerModel>();
    ReportWeekModel trainingWeek = new ReportWeekModel();
    List<RunnerModel> CoachRunners = new List<RunnerModel>();
    List<ReportModel> trainingCycles = new List<ReportModel>();
    RunnerModel coach = new RunnerModel();
    public int x { get; set; } = 0;
    public int status = 0; 
    public Color color { get; set; } = Color.Default;
    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User.Identity;
        coach = runnerData.GetCurrentRunner(user.Name);
        runners = runnerData.GetRunners();
        if (user != null)
        {
            CoachRunners = runnerData.GetCoachRunners(coach.Id);
        }
        foreach(var a in CoachRunners)
        {
            a.Status = runnerData.GetStatus(a.Id); 
            if(a.Status == 2)
            {
                color = Color.Error;
            }
            if(a.Status == 1)
            {
                color = Color.Success;
            }
            if(a.Status == 0)
            {
                color = Color.Info; 
            }

        }
    }

    public void OpenDialog()
    {

        var options = new DialogOptions()
         {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
         };
        DialogService.Show<AddTraineeDialog>("Pievienot jaunu audzēkni", options);
    }


    public Color GetSatatus()
    {
        return Color.Info; 
    }

    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
    public void OpenRunner(int id)
    {
        NavigationManager.NavigateTo("supervaronis/" + id);
    }
    private string message { get; set; } = "";

    public void HandleDeleteTraineeClick(int crunner_id)
    {

        if (crunner_id != null)
        {
            runnerData.RemoveTrainee(crunner_id, coach.Id);
            StateHasChanged();
            CoachRunners = runnerData.GetCoachRunners(coach.Id);
            SnackbarService.Add("Lietotājs noņemts no audzēkņu saraksta", Severity.Success, config =>
            {
               config.Onclick = snackbar =>
               {
                   return Task.CompletedTask;
               };
            });
        }

    }

   

   

}
