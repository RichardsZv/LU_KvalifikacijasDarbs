@page "/supervaronis/{id}"
@attribute [Authorize(Roles = "Treneris")]
@using DataAccessLibrary.Models
@using System.ComponentModel.DataAnnotations
@using DataAccessLibrary
@using DataAccessLibrary.Data
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SupervaroniApp.Components
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IRunnerData runnerData




<MudGrid>  
    <MudItem xs="12" sm="12" md="12" lg="4" xl="4" xxl="4" >
        <MudCard Elevation="2">
            <MudCardHeader Class="d-flex justify-center">
                <MudText>Audzēkņa informācija</MudText>
                
            </MudCardHeader>
            <MudDivider></MudDivider>
            <MudCardContent>
                <MudText>Vārds: @runner.Firstname @runner.Lastname</MudText>
                <MudText>E-pasts: @runner.Email</MudText>
                <MudText>Dzimums: @runner.enumValue</MudText>
                <MudText>Vecums: @Age</MudText>
            </MudCardContent>
           
        </MudCard>
    </MudItem>

    <MudItem xs="12" sm="12" md="12" lg="8" xl="8" xxl="8">
        <MudCard>
            <MudCardHeader>
                <MudText>Šobrīdējā atskatite</MudText>
            </MudCardHeader>
            <MudCardContent>

            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="12" lg="6" xl="6" xxl="6">
        <MudCard>
            <MudCardHeader>
                <MudText>Treniņu cikli</MudText>
            </MudCardHeader>
            <MudCardContent>

            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="12" lg="6" xl="6" xxl="6">
        <MudCard>
            <MudCardHeader>
                <MudText>Nez kas vel </MudText>
            </MudCardHeader>
            <MudCardContent>

            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string id { get; set; }

    RunnerModel runner = new RunnerModel();
    int Age = 0; 
 
    string x = ""; 
    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User.Identity;
        var runnerInfo = runnerData.GetRunnerById(id); 
        runner = runnerInfo; 
        Age = DateTime.Today.Year - runner.Birthdate.Value.Year; 
    }



}