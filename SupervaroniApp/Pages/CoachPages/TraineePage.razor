@page "/supervaronis/{id}"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@attribute [Authorize(Roles = "Treneris")]
@using DataAccessLibrary.Models
@using System.ComponentModel.DataAnnotations
@using DataAccessLibrary
@using DataAccessLibrary.Data
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SupervaroniApp.Components
@using SupervaroniApp.Pages
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IRunnerData runnerData
@inject IReportData reportData
@inject IDialogService DialogService

<MudGrid>  
    @*Informācija par audzēkni*@
    <MudItem xs="12" sm="12" md="12" lg="5" xl="5" xxl="5">
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-8" Color="Color.Tertiary" Style="min-height:25vh; ">
            @*Pamatinformācija*@
            <MudTabPanel Text="Audzēkņa informācija">
                <TraineeInfo id="@id"></TraineeInfo>
            </MudTabPanel>
            @*Testu saraksts*@
            <MudTabPanel Text="Testi">
                <TraineeTests id="@id"></TraineeTests>
            </MudTabPanel>
            @*Sacensību saraksts*@
            <MudTabPanel Text="Sacensības">
                <TraineeRaces id="@id"></TraineeRaces>
            </MudTabPanel>
            @*Traumu saraksts*@
            <MudTabPanel Text="Traumas">
                <TraineeInjuries id="@id"></TraineeInjuries>
            </MudTabPanel>
            @*Personīgo rekordu saraksts*@
            <MudTabPanel Text="Personīgie rekordi">
                <TraineePersonalBests id="@id"></TraineePersonalBests>
            </MudTabPanel>
            <MudIconButton></MudIconButton>
        </MudTabs>
    </MudItem>
    @*Treniņu cikli*@
    <MudItem xs="12" sm="12" md="12" lg="7" xl="7" xxl="7">
        <MudCard Elevation="2" Style="min-height: 25vh;">
            <MudCardHeader Style="background-color: #1ec8a5ff; color: whitesmoke; " Class="d-flex justify-center">
                <MudText Typo="Typo.h6" Color="Color.Default">Treniņu cikli</MudText>
            </MudCardHeader>
            <MudDivider></MudDivider>
            <MudCardContent>
                <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="OnCreateCycleClick">Izveidot treniņu ciklu</MudButton>
                <br />
                <MudExpansionPanels Class="mt-6">
                  @foreach(var tc in trainingCycles){
                        <MudExpansionPanel Text="@tc.Title">
                        <MudText>Sākuma datums: @tc.Dat_S.Value.ToShortDateString()</MudText>
                        <MudText>Beigu datums: @tc.Dat_B.Value.ToShortDateString()</MudText>
                       @* Nedēļas nr.
                        Nedēļu skaits*@
                      </MudExpansionPanel>
                  }
                </MudExpansionPanels>
            </MudCardContent>
        </MudCard>
    </MudItem>
    @*Atskaite Izpildīta*@
    <MudItem xs="12" sm="12" md="12" lg="6" xl="6" xxl="6">
        <MudCard>
            <MudCardHeader Style="background-color: #1ec8a5ff; color: whitesmoke; " Class="d-flex justify-center">
                <MudText Typo="Typo.h6" Color="Color.Default">Iepānots</MudText>
            </MudCardHeader>
            <MudCardContent>

            </MudCardContent>
        </MudCard>
    </MudItem>
    @*Atskaite Plāns*@
    <MudItem xs="12" sm="12" md="12" lg="6" xl="6" xxl="6">
        <MudCard>
            <MudCardHeader Style="background-color: #1ec8a5ff; color: whitesmoke; " Class="d-flex justify-center">
                <MudText Typo="Typo.h6" Color="Color.Default">Realitātē</MudText>
            </MudCardHeader>
            <MudCardContent>

            </MudCardContent>
        </MudCard>
    </MudItem>
     @*Tekošā atskaite*@
     <Reprot></Reprot>
</MudGrid>


@code {
    [Parameter]
    public string id { get; set; }
    
    private bool _loading = true;
    RunnerModel runner = new RunnerModel();
    List<ReportModel> trainingCycles = new List<ReportModel>(); 

    int Age = 0; 

    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User.Identity;
        var runnerInfo = runnerData.GetRunnerById(id); 
        runner = runnerInfo; 
        trainingCycles = reportData.GetTrainingCycles(id); 
        _loading = false; 
 
    }
    public void OnCreateCycleClick(){
        var parameters = new DialogParameters();
        parameters.Add("runnerid", runner.Id); 
        var options = new DialogOptions()
        {

                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
            };
        if (runner != null)
        {
            DialogService.Show<CreateTrainingCycleDialog>("Izveidot jaunu treniņu ciklu", parameters, options);
        }
    }
  
    //void RemoveItem()
    //{
    //    tests.RemoveAt(0);
    //}

}