@using DataAccessLibrary.Data
@using DataAccessLibrary.Models
@using SupervaroniApp.Components.Dialogs
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IRunnerData runnerData
@inject IDialogService DialogService

<style>

.selected {
    background-color: #1E88E5 !important;
}

.selected > td {
color: white !important;
}

.selected > td .mud-input {
    color: white !important;
}

</style>


<MudButton OnClick="@AddRace" Color="@Color.Success" Class="add-item-btn">Pievienot</MudButton>
<MudIconButton OnClick="Reload" Color="@Color.Info" Icon="@Icons.Filled.RotateRight"></MudIconButton>
<MudIconButton OnClick="HandleDeleteRaceClick" Color="@Color.Error" Icon="@Icons.Filled.Delete"></MudIconButton>

<MudTable Items="@races" T="RaceModel"  Hover="true" Loading="@_loading" LoadingProgressColor="Color.Info" SortLabel="Sort By" Dense="true" @bind-SelectedItem="@selectedItem" RowClassFunc="@SelectedRowClassFunc">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<RaceModel, object>(x=>x.Dat.Value)">Datums</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RaceModel, object>(x=>x.Title)">Nosaukums</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RaceModel, object>(x=>x.Result)">Rezultāts</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RaceModel, object>(x=>x.Place)">Vieta</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RaceModel, object>(x=>x.Group)">Grupa</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RaceModel, object>(x=>x.Notes)">Piezīmes</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RaceModel, object>(x=>x.Evaluation)">Novērtējums</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Datums">@context.Dat.Value.ToShortDateString()</MudTd>
        <MudTd DataLabel="Nosaukums">@context.Title</MudTd>
        <MudTd DataLabel="Rezultāts">@context.Result.Value</MudTd>
        <MudTd DataLabel="Vieta">@context.Place</MudTd>
        <MudTd DataLabel="Grupa">@context.Group</MudTd>
        <MudTd DataLabel="Piezīmes">@context.Notes</MudTd>
        <MudTd DataLabel="Novērtējums"><MudRating SelectedValue="@context.Evaluation" MaxValue="5" ReadOnly="true" Color="Color.Tertiary" FullIcon="@Icons.Filled.Circle" EmptyIcon="@Icons.Outlined.Circle"></MudRating></MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter]
    public string id { get; set; }
    List<RaceModel> races = new List<RaceModel>();
    private bool _loading = true;
    RunnerModel runner = new RunnerModel();

    private List<string> clickedEvents = new();
    private RaceModel selectedItem = null;
    private int selectedRowNumber = -1;

    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User.Identity;
        var runnerInfo = runnerData.GetRunnerById(id);
        runner = runnerInfo;
        races = runnerData.GetRaces(id);
        _loading = false;
    }
    void AddRace()
    {
        var parameters = new DialogParameters();
        parameters.Add("runnerid", runner.Id);
        var options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
            };
        if (runner != null)
        {
            DialogService.Show<AddRaceDialog>("Pievienot sacensības", parameters, options);
        }

    }
    async void Reload()
    {
        _loading = true;
        races = runnerData.GetRaces(id); 
        _loading = false;
    }

    private string SelectedRowClassFunc(RaceModel race, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            return string.Empty;
        }
        else if (selectedItem != null && selectedItem.Equals(race))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private void HandleDeleteRaceClick()
    {
        if (selectedItem != null)
        {
            runnerData.DeleteRace(runner.Id.ToString(), selectedItem.Id);
            races = runnerData.GetRaces(id);
        }
        StateHasChanged();
    }
}
