@using DataAccessLibrary.Models
@using DataAccessLibrary.Data
@using SupervaroniApp.Pages
@using System.ComponentModel.DataAnnotations
@inject IRunnerData runnerData
@inject IReportData reportData
@inject AuthenticationStateProvider GetAuthenticationStateAsync


<MudDialog>
    <DialogContent>
        <EditForm Model="@race" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudDatePicker Label="Datums" @bind-Date="@race.Dat" DateFormat="dd.MM.yyyy"></MudDatePicker>
                            <MudTextField Label="Nosaukums" @bind-Value="@race.Title" For="@(() => race.Title)"> </MudTextField>
                            <MudTextField T="TimeSpan?" Label="Rezultāts" @bind-Value="@race.Result" />
                            <MudTextField Label="Vieta" @bind-Value="@race.Place" For="@(() => race.Place)"> </MudTextField>
                            <MudTextField Label="Grupa" @bind-Value="@race.Group" For="@(() => race.Group)"> </MudTextField>
                            <MudTextField Label="Piezīmes" @bind-Value="@race.Notes" For="@(() => race.Notes)"> </MudTextField>
                            <MudText>Novērtējums : <MudRating @bind-SelectedValue="@race.Evaluation" MaxValue="5" Color="Color.Tertiary" FullIcon="@Icons.Filled.Circle" EmptyIcon="@Icons.Outlined.Circle" Class="pt-4">Novērtējums</MudRating></MudText>
                             
                        
                         
                           @* <MudNumericField Label="Novērtējums" @bind-Value="@race.Evaluation" For="@(() => race.Evaluation)"> </MudNumericField>*@
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="Cancel">Atcelt</MudButton>
                            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Saglabāt</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>

    </DialogContent>
    <DialogActions>
       
    </DialogActions>
</MudDialog>
@code {
    RaceModel race = new RaceModel();
    TestsModel test = new TestsModel();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int runnerid { get; set; }
    string uname = "";


    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User.Identity;
        uname = user.Name;
    }
    void Submit()
    {
        race.RunnerId = runnerid;
        runnerData.AddRace(race);
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();

}
